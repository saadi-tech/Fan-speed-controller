
firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000338  000003cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000338  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000016  00800110  00800110  000003dc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003dc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000040c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  0000044c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009b6  00000000  00000000  0000049c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000073c  00000000  00000000  00000e52  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000362  00000000  00000000  0000158e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e4  00000000  00000000  000018f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003eb  00000000  00000000  000019d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000028f  00000000  00000000  00001dbf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  0000204e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e3       	ldi	r30, 0x38	; 56
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e1       	ldi	r26, 0x10	; 16
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 32       	cpi	r26, 0x26	; 38
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 7d 00 	call	0xfa	; 0xfa <main>
  9e:	0c 94 9a 01 	jmp	0x334	; 0x334 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <init_pwm>:




void init_pwm(uint8_t value){
	DDRD |= (1 << DDD6);
  a6:	56 9a       	sbi	0x0a, 6	; 10
	// PD6 is now an output

	OCR0A = (value * 255)/100;
  a8:	2f ef       	ldi	r18, 0xFF	; 255
  aa:	82 9f       	mul	r24, r18
  ac:	c0 01       	movw	r24, r0
  ae:	11 24       	eor	r1, r1
  b0:	64 e6       	ldi	r22, 0x64	; 100
  b2:	70 e0       	ldi	r23, 0x00	; 0
  b4:	0e 94 32 01 	call	0x264	; 0x264 <__divmodhi4>
  b8:	67 bd       	out	0x27, r22	; 39
	// set PWM for 50% duty cycle


	TCCR0A |= (1 << COM0A1);
  ba:	84 b5       	in	r24, 0x24	; 36
  bc:	80 68       	ori	r24, 0x80	; 128
  be:	84 bd       	out	0x24, r24	; 36
	// set none-inverting mode

	TCCR0A |= (1 << WGM01) | (1 << WGM00);
  c0:	84 b5       	in	r24, 0x24	; 36
  c2:	83 60       	ori	r24, 0x03	; 3
  c4:	84 bd       	out	0x24, r24	; 36
	// set fast PWM Mode

	TCCR0B |= (1 << CS01);
  c6:	85 b5       	in	r24, 0x25	; 37
  c8:	82 60       	ori	r24, 0x02	; 2
  ca:	85 bd       	out	0x25, r24	; 37
  cc:	08 95       	ret

000000ce <set_PWM>:


}

void set_PWM(uint8_t value){
	OCR0A = (value * 255)/100;
  ce:	2f ef       	ldi	r18, 0xFF	; 255
  d0:	82 9f       	mul	r24, r18
  d2:	c0 01       	movw	r24, r0
  d4:	11 24       	eor	r1, r1
  d6:	64 e6       	ldi	r22, 0x64	; 100
  d8:	70 e0       	ldi	r23, 0x00	; 0
  da:	0e 94 32 01 	call	0x264	; 0x264 <__divmodhi4>
  de:	67 bd       	out	0x27, r22	; 39
  e0:	08 95       	ret

000000e2 <uart_init>:

void uart_init(int baud_rate){
	
	//int value =     ((freq)/(16*baud_rate)) - 1;
	int value = 51;
	UBRR0H = (value>>8);
  e2:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
	UBRR0L = (value);
  e6:	83 e3       	ldi	r24, 0x33	; 51
  e8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	
	UCSR0C = 0x06;       /* Set frame format: 8data, 1stop bit  */
  ec:	86 e0       	ldi	r24, 0x06	; 6
  ee:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
	
	UCSR0B = (1<<TXEN0) | (1<<RXCIE0) | (1<<RXEN0); /* Enable  transmitter                 */
  f2:	88 e9       	ldi	r24, 0x98	; 152
  f4:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
  f8:	08 95       	ret

000000fa <main>:
char string[20];

int main(void)
{
    /* Replace with your application code */
	init_pwm(0);
  fa:	80 e0       	ldi	r24, 0x00	; 0
  fc:	0e 94 53 00 	call	0xa6	; 0xa6 <init_pwm>
	
	uart_init(9600);
 100:	80 e8       	ldi	r24, 0x80	; 128
 102:	95 e2       	ldi	r25, 0x25	; 37
 104:	0e 94 71 00 	call	0xe2	; 0xe2 <uart_init>
	sei();
 108:	78 94       	sei
    while (1) 
	    {
			set_PWM(current_speed);
 10a:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 10e:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_end+0x1>
 112:	0e 94 67 00 	call	0xce	; 0xce <set_PWM>
 116:	f9 cf       	rjmp	.-14     	; 0x10a <main+0x10>

00000118 <serial_write>:
	UCSR0C = 0x06;       /* Set frame format: 8data, 1stop bit  */
	
	UCSR0B = (1<<TXEN0) | (1<<RXCIE0) | (1<<RXEN0); /* Enable  transmitter                 */
}

void serial_write(unsigned char data[]){
 118:	cf 93       	push	r28
 11a:	df 93       	push	r29
	int length = strlen(data);
 11c:	fc 01       	movw	r30, r24
 11e:	01 90       	ld	r0, Z+
 120:	00 20       	and	r0, r0
 122:	e9 f7       	brne	.-6      	; 0x11e <serial_write+0x6>
 124:	31 97       	sbiw	r30, 0x01	; 1
 126:	e8 1b       	sub	r30, r24
 128:	f9 0b       	sbc	r31, r25
	int i = 0;
	for (i = 0; i < length ; i++){
 12a:	1e 16       	cp	r1, r30
 12c:	1f 06       	cpc	r1, r31
 12e:	84 f4       	brge	.+32     	; 0x150 <serial_write+0x38>
 130:	dc 01       	movw	r26, r24
 132:	9c 01       	movw	r18, r24
 134:	2e 0f       	add	r18, r30
 136:	3f 1f       	adc	r19, r31
		UDR0 = data[i];
 138:	c6 ec       	ldi	r28, 0xC6	; 198
 13a:	d0 e0       	ldi	r29, 0x00	; 0
		while (!( UCSR0A & (1<<UDRE0))); /* Wait for empty transmit buffer*/
 13c:	e0 ec       	ldi	r30, 0xC0	; 192
 13e:	f0 e0       	ldi	r31, 0x00	; 0

void serial_write(unsigned char data[]){
	int length = strlen(data);
	int i = 0;
	for (i = 0; i < length ; i++){
		UDR0 = data[i];
 140:	9d 91       	ld	r25, X+
 142:	98 83       	st	Y, r25
		while (!( UCSR0A & (1<<UDRE0))); /* Wait for empty transmit buffer*/
 144:	90 81       	ld	r25, Z
 146:	95 ff       	sbrs	r25, 5
 148:	fd cf       	rjmp	.-6      	; 0x144 <serial_write+0x2c>
}

void serial_write(unsigned char data[]){
	int length = strlen(data);
	int i = 0;
	for (i = 0; i < length ; i++){
 14a:	a2 17       	cp	r26, r18
 14c:	b3 07       	cpc	r27, r19
 14e:	c1 f7       	brne	.-16     	; 0x140 <serial_write+0x28>
		while (!( UCSR0A & (1<<UDRE0))); /* Wait for empty transmit buffer*/
		
		
	}
	
}
 150:	df 91       	pop	r29
 152:	cf 91       	pop	r28
 154:	08 95       	ret

00000156 <serial_writeln>:

void serial_writeln(unsigned char data[]){
 156:	cf 93       	push	r28
 158:	df 93       	push	r29
	int length = strlen(data);
 15a:	fc 01       	movw	r30, r24
 15c:	01 90       	ld	r0, Z+
 15e:	00 20       	and	r0, r0
 160:	e9 f7       	brne	.-6      	; 0x15c <serial_writeln+0x6>
 162:	31 97       	sbiw	r30, 0x01	; 1
 164:	e8 1b       	sub	r30, r24
 166:	f9 0b       	sbc	r31, r25
	int i = 0;
	for (i = 0; i < length ; i++){
 168:	1e 16       	cp	r1, r30
 16a:	1f 06       	cpc	r1, r31
 16c:	84 f4       	brge	.+32     	; 0x18e <serial_writeln+0x38>
 16e:	dc 01       	movw	r26, r24
 170:	9c 01       	movw	r18, r24
 172:	2e 0f       	add	r18, r30
 174:	3f 1f       	adc	r19, r31
		UDR0 = data[i];
 176:	c6 ec       	ldi	r28, 0xC6	; 198
 178:	d0 e0       	ldi	r29, 0x00	; 0
		while (!( UCSR0A & (1<<UDRE0))); /* Wait for empty transmit buffer*/
 17a:	e0 ec       	ldi	r30, 0xC0	; 192
 17c:	f0 e0       	ldi	r31, 0x00	; 0

void serial_writeln(unsigned char data[]){
	int length = strlen(data);
	int i = 0;
	for (i = 0; i < length ; i++){
		UDR0 = data[i];
 17e:	9d 91       	ld	r25, X+
 180:	98 83       	st	Y, r25
		while (!( UCSR0A & (1<<UDRE0))); /* Wait for empty transmit buffer*/
 182:	90 81       	ld	r25, Z
 184:	95 ff       	sbrs	r25, 5
 186:	fd cf       	rjmp	.-6      	; 0x182 <serial_writeln+0x2c>
}

void serial_writeln(unsigned char data[]){
	int length = strlen(data);
	int i = 0;
	for (i = 0; i < length ; i++){
 188:	a2 17       	cp	r26, r18
 18a:	b3 07       	cpc	r27, r19
 18c:	c1 f7       	brne	.-16     	; 0x17e <serial_writeln+0x28>
		while (!( UCSR0A & (1<<UDRE0))); /* Wait for empty transmit buffer*/
		
		
	}
	
	serial_write("\n\r");
 18e:	80 e0       	ldi	r24, 0x00	; 0
 190:	91 e0       	ldi	r25, 0x01	; 1
 192:	0e 94 8c 00 	call	0x118	; 0x118 <serial_write>
	
}
 196:	df 91       	pop	r29
 198:	cf 91       	pop	r28
 19a:	08 95       	ret

0000019c <__vector_18>:

ISR (USART_RX_vect){
 19c:	1f 92       	push	r1
 19e:	0f 92       	push	r0
 1a0:	0f b6       	in	r0, 0x3f	; 63
 1a2:	0f 92       	push	r0
 1a4:	11 24       	eor	r1, r1
 1a6:	2f 93       	push	r18
 1a8:	3f 93       	push	r19
 1aa:	4f 93       	push	r20
 1ac:	5f 93       	push	r21
 1ae:	6f 93       	push	r22
 1b0:	7f 93       	push	r23
 1b2:	8f 93       	push	r24
 1b4:	9f 93       	push	r25
 1b6:	af 93       	push	r26
 1b8:	bf 93       	push	r27
 1ba:	ef 93       	push	r30
 1bc:	ff 93       	push	r31
	
	char ReceivedChar = UDR0;
 1be:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
	
	if (ReceivedChar != '\n' && ReceivedChar != '\r'){
 1c2:	8a 30       	cpi	r24, 0x0A	; 10
 1c4:	f1 f1       	breq	.+124    	; 0x242 <__vector_18+0xa6>
 1c6:	8d 30       	cpi	r24, 0x0D	; 13
 1c8:	e1 f1       	breq	.+120    	; 0x242 <__vector_18+0xa6>
	if (ReceivedChar == 's'){
 1ca:	83 37       	cpi	r24, 0x73	; 115
 1cc:	b9 f4       	brne	.+46     	; 0x1fc <__vector_18+0x60>
		current_speed = 0;
 1ce:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <__data_end+0x1>
 1d2:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <__data_end>
		serial_write("Speed set: ");
 1d6:	83 e0       	ldi	r24, 0x03	; 3
 1d8:	91 e0       	ldi	r25, 0x01	; 1
 1da:	0e 94 8c 00 	call	0x118	; 0x118 <serial_write>
		itoa(current_speed,string,10);
 1de:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 1e2:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_end+0x1>
 1e6:	4a e0       	ldi	r20, 0x0A	; 10
 1e8:	50 e0       	ldi	r21, 0x00	; 0
 1ea:	62 e1       	ldi	r22, 0x12	; 18
 1ec:	71 e0       	ldi	r23, 0x01	; 1
 1ee:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <itoa>
		serial_writeln(string);
 1f2:	82 e1       	ldi	r24, 0x12	; 18
 1f4:	91 e0       	ldi	r25, 0x01	; 1
 1f6:	0e 94 ab 00 	call	0x156	; 0x156 <serial_writeln>
 1fa:	23 c0       	rjmp	.+70     	; 0x242 <__vector_18+0xa6>
	}
	else{
	current_speed = 10 + 10*(ReceivedChar-'0');
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	8f 97       	sbiw	r24, 0x2f	; 47
 200:	9c 01       	movw	r18, r24
 202:	22 0f       	add	r18, r18
 204:	33 1f       	adc	r19, r19
 206:	88 0f       	add	r24, r24
 208:	99 1f       	adc	r25, r25
 20a:	88 0f       	add	r24, r24
 20c:	99 1f       	adc	r25, r25
 20e:	88 0f       	add	r24, r24
 210:	99 1f       	adc	r25, r25
 212:	82 0f       	add	r24, r18
 214:	93 1f       	adc	r25, r19
 216:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <__data_end+0x1>
 21a:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
	serial_write("Speed set: ");
 21e:	83 e0       	ldi	r24, 0x03	; 3
 220:	91 e0       	ldi	r25, 0x01	; 1
 222:	0e 94 8c 00 	call	0x118	; 0x118 <serial_write>
	itoa(current_speed,string,10);
 226:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 22a:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_end+0x1>
 22e:	4a e0       	ldi	r20, 0x0A	; 10
 230:	50 e0       	ldi	r21, 0x00	; 0
 232:	62 e1       	ldi	r22, 0x12	; 18
 234:	71 e0       	ldi	r23, 0x01	; 1
 236:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <itoa>
	serial_writeln(string);
 23a:	82 e1       	ldi	r24, 0x12	; 18
 23c:	91 e0       	ldi	r25, 0x01	; 1
 23e:	0e 94 ab 00 	call	0x156	; 0x156 <serial_writeln>
}
	}
 242:	ff 91       	pop	r31
 244:	ef 91       	pop	r30
 246:	bf 91       	pop	r27
 248:	af 91       	pop	r26
 24a:	9f 91       	pop	r25
 24c:	8f 91       	pop	r24
 24e:	7f 91       	pop	r23
 250:	6f 91       	pop	r22
 252:	5f 91       	pop	r21
 254:	4f 91       	pop	r20
 256:	3f 91       	pop	r19
 258:	2f 91       	pop	r18
 25a:	0f 90       	pop	r0
 25c:	0f be       	out	0x3f, r0	; 63
 25e:	0f 90       	pop	r0
 260:	1f 90       	pop	r1
 262:	18 95       	reti

00000264 <__divmodhi4>:
 264:	97 fb       	bst	r25, 7
 266:	07 2e       	mov	r0, r23
 268:	16 f4       	brtc	.+4      	; 0x26e <__divmodhi4+0xa>
 26a:	00 94       	com	r0
 26c:	07 d0       	rcall	.+14     	; 0x27c <__divmodhi4_neg1>
 26e:	77 fd       	sbrc	r23, 7
 270:	09 d0       	rcall	.+18     	; 0x284 <__divmodhi4_neg2>
 272:	0e 94 46 01 	call	0x28c	; 0x28c <__udivmodhi4>
 276:	07 fc       	sbrc	r0, 7
 278:	05 d0       	rcall	.+10     	; 0x284 <__divmodhi4_neg2>
 27a:	3e f4       	brtc	.+14     	; 0x28a <__divmodhi4_exit>

0000027c <__divmodhi4_neg1>:
 27c:	90 95       	com	r25
 27e:	81 95       	neg	r24
 280:	9f 4f       	sbci	r25, 0xFF	; 255
 282:	08 95       	ret

00000284 <__divmodhi4_neg2>:
 284:	70 95       	com	r23
 286:	61 95       	neg	r22
 288:	7f 4f       	sbci	r23, 0xFF	; 255

0000028a <__divmodhi4_exit>:
 28a:	08 95       	ret

0000028c <__udivmodhi4>:
 28c:	aa 1b       	sub	r26, r26
 28e:	bb 1b       	sub	r27, r27
 290:	51 e1       	ldi	r21, 0x11	; 17
 292:	07 c0       	rjmp	.+14     	; 0x2a2 <__udivmodhi4_ep>

00000294 <__udivmodhi4_loop>:
 294:	aa 1f       	adc	r26, r26
 296:	bb 1f       	adc	r27, r27
 298:	a6 17       	cp	r26, r22
 29a:	b7 07       	cpc	r27, r23
 29c:	10 f0       	brcs	.+4      	; 0x2a2 <__udivmodhi4_ep>
 29e:	a6 1b       	sub	r26, r22
 2a0:	b7 0b       	sbc	r27, r23

000002a2 <__udivmodhi4_ep>:
 2a2:	88 1f       	adc	r24, r24
 2a4:	99 1f       	adc	r25, r25
 2a6:	5a 95       	dec	r21
 2a8:	a9 f7       	brne	.-22     	; 0x294 <__udivmodhi4_loop>
 2aa:	80 95       	com	r24
 2ac:	90 95       	com	r25
 2ae:	bc 01       	movw	r22, r24
 2b0:	cd 01       	movw	r24, r26
 2b2:	08 95       	ret

000002b4 <itoa>:
 2b4:	45 32       	cpi	r20, 0x25	; 37
 2b6:	51 05       	cpc	r21, r1
 2b8:	20 f4       	brcc	.+8      	; 0x2c2 <itoa+0xe>
 2ba:	42 30       	cpi	r20, 0x02	; 2
 2bc:	10 f0       	brcs	.+4      	; 0x2c2 <itoa+0xe>
 2be:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__itoa_ncheck>
 2c2:	fb 01       	movw	r30, r22
 2c4:	10 82       	st	Z, r1
 2c6:	cb 01       	movw	r24, r22
 2c8:	08 95       	ret

000002ca <__itoa_ncheck>:
 2ca:	bb 27       	eor	r27, r27
 2cc:	4a 30       	cpi	r20, 0x0A	; 10
 2ce:	31 f4       	brne	.+12     	; 0x2dc <__itoa_ncheck+0x12>
 2d0:	99 23       	and	r25, r25
 2d2:	22 f4       	brpl	.+8      	; 0x2dc <__itoa_ncheck+0x12>
 2d4:	bd e2       	ldi	r27, 0x2D	; 45
 2d6:	90 95       	com	r25
 2d8:	81 95       	neg	r24
 2da:	9f 4f       	sbci	r25, 0xFF	; 255
 2dc:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__utoa_common>

000002e0 <__utoa_ncheck>:
 2e0:	bb 27       	eor	r27, r27

000002e2 <__utoa_common>:
 2e2:	fb 01       	movw	r30, r22
 2e4:	55 27       	eor	r21, r21
 2e6:	aa 27       	eor	r26, r26
 2e8:	88 0f       	add	r24, r24
 2ea:	99 1f       	adc	r25, r25
 2ec:	aa 1f       	adc	r26, r26
 2ee:	a4 17       	cp	r26, r20
 2f0:	10 f0       	brcs	.+4      	; 0x2f6 <__utoa_common+0x14>
 2f2:	a4 1b       	sub	r26, r20
 2f4:	83 95       	inc	r24
 2f6:	50 51       	subi	r21, 0x10	; 16
 2f8:	b9 f7       	brne	.-18     	; 0x2e8 <__utoa_common+0x6>
 2fa:	a0 5d       	subi	r26, 0xD0	; 208
 2fc:	aa 33       	cpi	r26, 0x3A	; 58
 2fe:	08 f0       	brcs	.+2      	; 0x302 <__utoa_common+0x20>
 300:	a9 5d       	subi	r26, 0xD9	; 217
 302:	a1 93       	st	Z+, r26
 304:	00 97       	sbiw	r24, 0x00	; 0
 306:	79 f7       	brne	.-34     	; 0x2e6 <__utoa_common+0x4>
 308:	b1 11       	cpse	r27, r1
 30a:	b1 93       	st	Z+, r27
 30c:	11 92       	st	Z+, r1
 30e:	cb 01       	movw	r24, r22
 310:	0c 94 8a 01 	jmp	0x314	; 0x314 <strrev>

00000314 <strrev>:
 314:	dc 01       	movw	r26, r24
 316:	fc 01       	movw	r30, r24
 318:	67 2f       	mov	r22, r23
 31a:	71 91       	ld	r23, Z+
 31c:	77 23       	and	r23, r23
 31e:	e1 f7       	brne	.-8      	; 0x318 <strrev+0x4>
 320:	32 97       	sbiw	r30, 0x02	; 2
 322:	04 c0       	rjmp	.+8      	; 0x32c <strrev+0x18>
 324:	7c 91       	ld	r23, X
 326:	6d 93       	st	X+, r22
 328:	70 83       	st	Z, r23
 32a:	62 91       	ld	r22, -Z
 32c:	ae 17       	cp	r26, r30
 32e:	bf 07       	cpc	r27, r31
 330:	c8 f3       	brcs	.-14     	; 0x324 <strrev+0x10>
 332:	08 95       	ret

00000334 <_exit>:
 334:	f8 94       	cli

00000336 <__stop_program>:
 336:	ff cf       	rjmp	.-2      	; 0x336 <__stop_program>
